package com.example.demo.redit;import lombok.extern.slf4j.Slf4j;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.dao.DataAccessException;import org.springframework.data.redis.connection.RedisConnection;import org.springframework.data.redis.core.RedisCallback;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.StringRedisSerializer;import org.springframework.lang.Nullable;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;/** * ProjectName * <BR><B>FileDescription：</B><BR><BR> * DescriptionDetail * * @author ：ZhangHanYuan zhang.hanyuan@qq.com * @date : 2019-05-17 11:43 * @since 1.8 */@RunWith(SpringRunner.class)@SpringBootTest@Slf4jpublic class RedisTest {    @Autowired    RedisTemplate<String, String> redisTemplate;    @Test    public void testRedis(){        //list集合 第一个元素为key值，第二个元素为弹出的元素值;当超时返回[null]//        List<Object> obj = redisTemplate.executePipelined(new RedisCallback<Object>() {//            @Nullable//            @Override//            public Object doInRedis(RedisConnection connection) throws DataAccessException {//                log.info("准备读取 Redis_test");//                //队列没有元素会阻塞操作，直到队列获取新的元素或超时//                return connection.bLPop(9999,"test".getBytes());//            }//        },new StringRedisSerializer());//        log.info("obj.size"+obj.size()+"  obj.get(0)"+obj.get(0)+"  obj:"+obj);    }}